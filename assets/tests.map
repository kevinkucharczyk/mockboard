{"version":3,"sources":["mockboard/tests/app.jshint.js","mockboard/tests/helpers/destroy-app.js","mockboard/tests/helpers/destroy-app.jshint.js","mockboard/tests/helpers/module-for-acceptance.js","mockboard/tests/helpers/module-for-acceptance.jshint.js","mockboard/tests/helpers/resolver.js","mockboard/tests/helpers/resolver.jshint.js","mockboard/tests/helpers/start-app.js","mockboard/tests/helpers/start-app.jshint.js","mockboard/tests/integration/pods/components/gauge-widget/component-test.js","mockboard/tests/integration/pods/components/gauge-widget/component-test.jshint.js","mockboard/tests/integration/pods/components/number-widget/component-test.js","mockboard/tests/integration/pods/components/number-widget/component-test.jshint.js","mockboard/tests/pods/application/view.jshint.js","mockboard/tests/pods/dashboard/controller.jshint.js","mockboard/tests/pods/dashboard/route.jshint.js","mockboard/tests/pods/error/controller.jshint.js","mockboard/tests/pods/index/controller.jshint.js","mockboard/tests/pods/index/route.jshint.js","mockboard/tests/resolver.jshint.js","mockboard/tests/router.jshint.js","mockboard/tests/test-helper.js","mockboard/tests/test-helper.jshint.js","mockboard/tests/unit/pods/application/view-test.js","mockboard/tests/unit/pods/application/view-test.jshint.js","mockboard/tests/unit/pods/dashboard/controller-test.js","mockboard/tests/unit/pods/dashboard/controller-test.jshint.js","mockboard/tests/unit/pods/dashboard/route-test.js","mockboard/tests/unit/pods/dashboard/route-test.jshint.js","mockboard/tests/unit/pods/error/controller-test.js","mockboard/tests/unit/pods/error/controller-test.jshint.js","mockboard/tests/unit/pods/index/controller-test.js","mockboard/tests/unit/pods/index/controller-test.jshint.js","mockboard/tests/unit/pods/index/route-test.js","mockboard/tests/unit/pods/index/route-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('mockboard/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('mockboard/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('mockboard/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('mockboard/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'mockboard/tests/helpers/start-app', 'mockboard/tests/helpers/destroy-app'], function (exports, _qunit, _mockboardTestsHelpersStartApp, _mockboardTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _mockboardTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _mockboardTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('mockboard/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('mockboard/tests/helpers/resolver', ['exports', 'mockboard/resolver', 'mockboard/config/environment'], function (exports, _mockboardResolver, _mockboardConfigEnvironment) {\n\n  var resolver = _mockboardResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _mockboardConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _mockboardConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('mockboard/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('mockboard/tests/helpers/start-app', ['exports', 'ember', 'mockboard/app', 'mockboard/config/environment'], function (exports, _ember, _mockboardApp, _mockboardConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _mockboardConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _mockboardApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('mockboard/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('mockboard/tests/integration/pods/components/gauge-widget/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('gauge-widget', 'Integration | Component | gauge widget', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('shows title', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 35\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'gauge-widget', [], ['title', 'Test Gauge'], ['loc', [null, [1, 0], [1, 35]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.widget__title').text().trim(), 'Test Gauge');\n  });\n});","define('mockboard/tests/integration/pods/components/gauge-widget/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/gauge-widget/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/gauge-widget/component-test.js should pass jshint.');\n  });\n});","define('mockboard/tests/integration/pods/components/number-widget/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('number-widget', 'Integration | Component | number widget', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('shows title and value', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 45\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'number-widget', [], ['title', 'Test Title', 'value', 10], ['loc', [null, [1, 0], [1, 45]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.widget__title').text().trim(), 'Test Title');\n\n    assert.equal(this.$('.widget__value').text().trim(), '10');\n  });\n});","define('mockboard/tests/integration/pods/components/number-widget/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/number-widget/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/number-widget/component-test.js should pass jshint.');\n  });\n});","define('mockboard/tests/pods/application/view.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/application/view.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/view.js should pass jshint.');\n  });\n});","define('mockboard/tests/pods/dashboard/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/dashboard/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dashboard/controller.js should pass jshint.');\n  });\n});","define('mockboard/tests/pods/dashboard/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/dashboard/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dashboard/route.js should pass jshint.');\n  });\n});","define('mockboard/tests/pods/error/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/error/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/error/controller.js should pass jshint.');\n  });\n});","define('mockboard/tests/pods/index/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/index/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/index/controller.js should pass jshint.');\n  });\n});","define('mockboard/tests/pods/index/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/index/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/index/route.js should pass jshint.');\n  });\n});","define('mockboard/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('mockboard/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('mockboard/tests/test-helper', ['exports', 'mockboard/tests/helpers/resolver', 'ember-qunit'], function (exports, _mockboardTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_mockboardTestsHelpersResolver['default']);\n});","define('mockboard/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('mockboard/tests/unit/pods/application/view-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('view:application', 'Unit | View | application');\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var view = this.subject();\n    assert.ok(view);\n  });\n});","define('mockboard/tests/unit/pods/application/view-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/application/view-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/application/view-test.js should pass jshint.');\n  });\n});","define(\"mockboard/tests/unit/pods/dashboard/controller-test\", [\"exports\"], function (exports) {});\n// import { moduleFor, test } from 'ember-qunit';\n\n// moduleFor('controller:dashboard', 'Unit | Controller | dashboard', {\n//   // Specify the other units that are required for this test.\n//   // needs: ['controller:foo']\n// });\n\n// // Replace this with your real tests.\n// test('it exists', function(assert) {\n//   let controller = this.subject();\n//   assert.ok(controller);\n// });","define('mockboard/tests/unit/pods/dashboard/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/dashboard/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dashboard/controller-test.js should pass jshint.');\n  });\n});","define('mockboard/tests/unit/pods/dashboard/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dashboard', 'Unit | Route | dashboard', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mockboard/tests/unit/pods/dashboard/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/dashboard/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dashboard/route-test.js should pass jshint.');\n  });\n});","define('mockboard/tests/unit/pods/error/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:error', 'Unit | Controller | error', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('mockboard/tests/unit/pods/error/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/error/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/error/controller-test.js should pass jshint.');\n  });\n});","define(\"mockboard/tests/unit/pods/index/controller-test\", [\"exports\"], function (exports) {});\n// import { moduleFor, test } from 'ember-qunit';\n\n// moduleFor('controller:index', 'Unit | Controller | index', {\n//   // Specify the other units that are required for this test.\n//   // needs: ['controller:foo']\n// });\n\n// // Replace this with your real tests.\n// test('it exists', function(assert) {\n//   let controller = this.subject();\n//   assert.ok(controller);\n// });","define('mockboard/tests/unit/pods/index/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/index/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/index/controller-test.js should pass jshint.');\n  });\n});","define('mockboard/tests/unit/pods/index/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mockboard/tests/unit/pods/index/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/index/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/index/route-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('mockboard/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}